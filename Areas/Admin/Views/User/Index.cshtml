@model IEnumerable<cleanNETCoreMVC.Areas.Admin.Controllers.UserWithRolesVM>
@using cleanNETCoreMVC.Models;

@{
    ViewData["Title"] = "จัดการผู้ใช้";
}

<div class="admin-nav flex justify-center mt-6 mb-8">
    <div class="flex gap-2 bg-white rounded-xl px-6 py-3">
        <div class="admin-nav-item">
            <a href="/Admin/Dashboard/Index"
                class="admin-nav-link flex items-center gap-2 px-4 py-2 rounded-lg font-semibold text-gray-500 hover:text-lime-600 hover:bg-gray-100 transition @((ViewContext.RouteData.Values["controller"]?.ToString() == "Dashboard") ? "bg-lime-100 text-lime-700" : "")">
                <i class="bi bi-speedometer2"></i><span>แดชบอร์ด</span>
            </a>
        </div>
        <div class="admin-nav-item">
            <a href="/Admin/Content/Index"
                class="admin-nav-link flex items-center gap-2 px-4 py-2 rounded-lg font-semibold text-gray-500 hover:text-lime-600 hover:bg-gray-100 transition @((ViewContext.RouteData.Values["controller"]?.ToString() == "Content") ? "bg-lime-100 text-lime-700" : "")">
                <i class="bi bi-newspaper"></i><span>จัดการเนื้อหา</span>
            </a>
        </div>
        <div class="admin-nav-item">
            <a href="/Admin/User/Index"
                class="admin-nav-link flex items-center gap-2 px-4 py-2 rounded-lg font-semibold text-gray-500 hover:text-lime-600 hover:bg-gray-100 transition @((ViewContext.RouteData.Values["controller"]?.ToString() == "User") ? "bg-lime-100 text-lime-700" : "")">
                <i class="bi bi-people"></i><span>จัดการผู้ใช้</span>
            </a>
        </div>
    </div>
</div>

<div class="container py-4 h-full flex flex-col flex-1">
    <div class="flex items-center mb-4">
        <h2 class="text-2xl font-bold text-gray-800">จัดการผู้ใช้</h2>
    </div>
    <div class="bg-white rounded-xl shadow border border-gray-200">
        <div class="flex flex-row items-center justify-between gap-2 px-4 pt-4 pb-2">
            <div class="flex flex-row items-center gap-2 flex-1">
                <label class="input input-bordered flex items-center gap-2 w-56 bg-white shadow">
                    <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M21 21l-4.35-4.35M17 11A6 6 0 1 1 5 11a6 6 0 0 1 12 0Z" />
                    </svg>
                    <input id="search-input" type="text" class="grow bg-white text-gray-800" placeholder="ค้นหาผู้ใช้..."
                        style="min-width: 120px;" />
                </label>
            </div>
            <div class="flex flex-row items-center gap-2">
                <button class="btn btn-outline btn-primary flex items-center gap-2 text-sm" id="btn-filter">
                    <i class="bi bi-funnel"></i> กรองผู้ใช้
                </button>
                <button class="btn btn-primary flex items-center gap-2 text-sm" id="btn-open-create-modal">
                    <i class="bi bi-plus-circle"></i> เพิ่มผู้ใช้
                </button>
            </div>
        </div>
        <div class="overflow-x-auto">
            <table class="table w-full text-gray-800 bg-white">
                <thead class="text-gray-800 border-b-2 border-gray-200 bg-gray-50">
                    <tr>
                        <th class="text-gray-800">ชื่อ</th>
                        <th class="text-gray-800">นามสกุล</th>
                        <th class="text-gray-800">อีเมล</th>
                        <th class="text-gray-800">เบอร์โทร</th>
                        <th class="text-gray-800">วันเกิด</th>
                        <th class="text-gray-800">สิทธิ์</th>
                        <th class="text-gray-800">วันที่สมัคร</th>
                        <th class="text-center text-gray-800">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var userVM in Model)
                    {
                        var user = userVM.User;
                        <tr class="border-b border-gray-100 bg-white user-row" data-name="@user.FirstName @user.LastName" data-email="@user.Email" data-role="@string.Join(", ", userVM.Roles)">
                            <td class="align-middle max-w-[120px] truncate text-gray-800">@user.FirstName</td>
                            <td class="align-middle max-w-[120px] truncate text-gray-800">@user.LastName</td>
                            <td class="align-middle max-w-[180px] truncate text-gray-800">@user.Email</td>
                            <td class="align-middle max-w-[120px] truncate text-gray-800">@user.PhoneNumber</td>
                            <td class="align-middle max-w-[120px] truncate text-gray-800">@(user.Birthdate?.ToString("dd/MM/yyyy") ?? "-")</td>
                            <td class="align-middle max-w-[100px] truncate text-gray-800">
                                @foreach (var role in userVM.Roles)
                                {
                                    string badgeClass = "badge badge-xs mr-1 mb-1 ";
                                    switch (role.ToLower())
                                    {
                                        case "admin":
                                            badgeClass += "badge badge-error text-blue-700 bg-blue-50 border-blue-300";
                                            break;
                                        case "user":
                                            badgeClass += "badge-success text-green-600 bg-green-50 border-green-300";
                                            break;
                                        default:
                                            badgeClass += "badge-neutral text-gray-700 bg-gray-100 border-gray-300";
                                            break;
                                    }
                                    <span class="@badgeClass">@role</span>
                                }
                            </td>
                            <td class="align-middle max-w-[120px] truncate text-gray-800">@(user.CreatedAt > DateTime.MinValue ? user.CreatedAt.ToString("dd/MM/yyyy") : "-")</td>
                            <td class="text-center">
                                <div class="dropdown dropdown-end">
                                    <button tabindex="0" class="btn btn-sm btn-outline btn-primary">Actions <svg
                                            xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline" fill="none"
                                            viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M19 9l-7 7-7-7" />
                                        </svg></button>
                                    <ul tabindex="0"
                                        class="dropdown-content menu p-2 shadow bg-white border border-gray-200 text-gray-800 rounded-box w-40 z-50">
                                        <li><a class="btn-edit flex items-center gap-2" href="#" data-id="@user.Id"><i
                                                    class="bi bi-pencil"></i> แก้ไข</a></li>
                                        <li><a class="btn-delete flex items-center gap-2 text-error" href="#"
                                                data-id="@user.Id"><i class="bi bi-trash"></i> ลบ</a></li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<dialog id="filterModal" class="modal" data-theme="light">
    <div class="modal-box bg-white text-gray-900 w-full max-w-lg">
        <h3 class="font-bold text-lg" id="filterModalLabel">กรองผู้ใช้</h3>
        <form id="filter-form" class="space-y-4 mt-4">
            <div>
                <label class="block mb-1">Role</label>
                <select id="filter-role" class="select select-bordered w-full">
                    <option value="">ทั้งหมด</option>
                    <option value="Admin">Admin</option>
                    <option value="User">User</option>
                </select>
            </div>
            <div>
                <label class="block mb-1">เบอร์โทร</label>
                <input id="filter-phone" type="text" class="input input-bordered w-full" placeholder="ค้นหาเบอร์โทร..." />
            </div>
            <div>
                <label class="block mb-1">วันเกิด (ตั้งแต่)</label>
                <input id="filter-birth-from" type="date" class="input input-bordered w-full" />
            </div>
            <div>
                <label class="block mb-1">วันเกิด (ถึง)</label>
                <input id="filter-birth-to" type="date" class="input input-bordered w-full" />
            </div>
            <div class="flex gap-2 justify-end">
                <button type="button" class="btn" onclick="document.getElementById('filterModal').close()">ยกเลิก</button>
                <button type="button" class="btn" id="btn-reset-filter">ล้างค่า</button>
                <button type="submit" class="btn btn-primary">กรอง</button>
            </div>
        </form>
    </div>
</dialog>

<dialog id="userModal" class="modal" data-theme="light">
  <div class="modal-box bg-white text-gray-900 w-full max-w-2xl" id="userModalBody">
  </div>
</dialog>
<dialog id="editUserModal" class="modal" data-theme="light">
  <div class="modal-box bg-white text-gray-900 w-full max-w-2xl" id="editUserModalBody">
  </div>
</dialog>
<dialog id="deleteUserModal" class="modal" data-theme="light">
  <div class="modal-box bg-white text-gray-900 w-full max-w-md" id="deleteUserModalBody">
  </div>
</dialog>

@section Scripts {
<script>
    document.getElementById('search-input').addEventListener('input', function () {
        filterUserTable();
    });
    document.getElementById('btn-filter').addEventListener('click', function () {
        const modal = document.getElementById('filterModal');
        modal.showModal();
    });
    document.getElementById('btn-reset-filter').addEventListener('click', function () {
        document.getElementById('filter-role').value = '';
        document.getElementById('filter-phone').value = '';
        document.getElementById('filter-birth-from').value = '';
        document.getElementById('filter-birth-to').value = '';
        filterUserTable();
    });
    document.getElementById('filter-form').addEventListener('submit', function (e) {
        e.preventDefault();
        filterUserTable();
        document.getElementById('filterModal').close();
    });
    function filterUserTable() {
        const search = document.getElementById('search-input').value.trim().toLowerCase();
        const role = document.getElementById('filter-role').value;
        const phone = document.getElementById('filter-phone').value.trim().toLowerCase();
        const birthFrom = document.getElementById('filter-birth-from').value;
        const birthTo = document.getElementById('filter-birth-to').value;
        document.querySelectorAll('.user-row').forEach(row => {
            let show = true;
            const name = row.getAttribute('data-name')?.toLowerCase() || '';
            const email = row.getAttribute('data-email')?.toLowerCase() || '';
            const phoneVal = row.children[3]?.innerText?.toLowerCase() || '';
            const birth = row.children[4]?.innerText || '';
            const roleVal = row.getAttribute('data-role') || '';
            if (search && !(name.includes(search) || email.includes(search) || phoneVal.includes(search) || birth.includes(search))) show = false;
            if (role && !roleVal.toLowerCase().includes(role.toLowerCase())) show = false;
            if (phone && !phoneVal.includes(phone)) show = false;
            if (birthFrom && (!birth || birth < birthFrom)) show = false;
            if (birthTo && (!birth || birth > birthTo)) show = false;
            row.style.display = show ? '' : 'none';
        });
    }
    function loadUserModal(url, modalId, bodyId) {
        const modal = document.getElementById(modalId);
        const body = document.getElementById(bodyId);
        try {
            if (modal.open) modal.close();
            body.innerHTML = '<div class="text-center py-5"><span class="loading loading-spinner loading-lg text-primary"></span></div>';
            fetch(url)
                .then(res => res.text())
                .then(html => {
                    body.innerHTML = html;
                    bindUserModalForm(modalId);
                });
            modal.showModal();
        } catch (e) {
            alert('เกิดข้อผิดพลาดในการเปิด Modal: ' + e.message);
        }
    }
    function bindUserModalForm(modalId) {
        const modal = document.getElementById(modalId);
        const form = modal.querySelector('form');
        if (form) {
            form.addEventListener('submit', function (e) {
                e.preventDefault();
                const formData = new FormData(form);
                let url = '';
                if (modalId === 'userModal') url = '@Url.Action("CreateAjax", "User", new { area = "Admin" })';
                if (modalId === 'editUserModal') url = '@Url.Action("EditAjax", "User", new { area = "Admin" })' + '?id=' + form.querySelector('[name=Id]')?.value;
                if (modalId === 'deleteUserModal') url = '@Url.Action("DeleteAjax", "User", new { area = "Admin" })' + '?id=' + form.querySelector('[name=Id]')?.value;
                fetch(url, {
                    method: 'POST',
                    body: formData
                })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            modal.close();
                            reloadUserTable();
                        } else {
                            alert('เกิดข้อผิดพลาด: ' + (data.errors ? data.errors.join('\n') : data.error));
                        }
                    });
            });
        }
    }
    function reloadUserTable() {
        fetch(window.location.pathname)
            .then(res => res.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const newTable = doc.querySelector('table');
                document.querySelector('table').innerHTML = newTable.innerHTML;
                document.querySelectorAll('.btn-edit').forEach(btn => {
                    btn.addEventListener('click', function () {
                        const id = this.getAttribute('data-id');
                        loadUserModal('@Url.Action("EditModal", "User", new { area = "Admin" })' + '?id=' + id, 'editUserModal', 'editUserModalBody');
                    });
                });
                document.querySelectorAll('.btn-delete').forEach(btn => {
                    btn.addEventListener('click', function () {
                        const id = this.getAttribute('data-id');
                        loadUserModal('@Url.Action("DeleteModal", "User", new { area = "Admin" })' + '?id=' + id, 'deleteUserModal', 'deleteUserModalBody');
                    });
                });
            });
    }
    document.getElementById('btn-open-create-modal').addEventListener('click', function () {
        loadUserModal('@Url.Action("CreateModal", "User", new { area = "Admin" })', 'userModal', 'userModalBody');
    });
    document.querySelectorAll('.btn-edit').forEach(btn => {
        btn.addEventListener('click', function () {
            const id = this.getAttribute('data-id');
            loadUserModal('@Url.Action("EditModal", "User", new { area = "Admin" })' + '?id=' + id, 'editUserModal', 'editUserModalBody');
        });
    });
    document.querySelectorAll('.btn-delete').forEach(btn => {
        btn.addEventListener('click', function () {
            const id = this.getAttribute('data-id');
            loadUserModal('@Url.Action("DeleteModal", "User", new { area = "Admin" })' + '?id=' + id, 'deleteUserModal', 'deleteUserModalBody');
        });
    });
</script>
}
